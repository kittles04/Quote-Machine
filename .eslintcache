[{"/Users/kwalker/Desktop/quote-app/src/reportWebVitals.js":"1","/Users/kwalker/Desktop/quote-app/src/App.js":"2","/Users/kwalker/Desktop/quote-app/src/components/QuoteBox.js":"3","/Users/kwalker/Desktop/quote-app/src/components/NewQuote.js":"4","/Users/kwalker/Desktop/quote-app/src/components/Share.js":"5"},{"size":362,"mtime":1606405662627,"results":"6","hashOfConfig":"7"},{"size":251,"mtime":1606413682101,"results":"8","hashOfConfig":"7"},{"size":1158,"mtime":1606420730530,"results":"9","hashOfConfig":"7"},{"size":574,"mtime":1606420494544,"results":"10","hashOfConfig":"7"},{"size":247,"mtime":1606410498962,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ga5bv3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kwalker/Desktop/quote-app/src/reportWebVitals.js",[],"/Users/kwalker/Desktop/quote-app/src/App.js",[],"/Users/kwalker/Desktop/quote-app/src/components/QuoteBox.js",["24","25"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NewQuote from \"./NewQuote\";\nimport { useState, useEffect } from \"react\";\n\nconst getPost = () =>\n  fetch(\n    \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n  ).then((response) => response.json());\nconst QuoteBox = (props) => {\n  //call to the APi and hold quotes array in state hook, pass to NewQuote.js\n  //button is here\n  const [quotes, updateQuotes] = useState([]);\n\n  useEffect(() => {\n    getPost().then((response) => updateQuotes(response[\"quotes\"]));\n  }, []);\n\n  if (!quotes) {\n    return <div>Loading...</div>;\n  }\n\n  const handleClick = () => {\n    console.log(quotes);\n  };\n\n  return (\n    <div id=\"quote-box\">\n      <div className=\"card medium\">\n        <div className=\"card-content\">\n          <NewQuote quotes={quotes} />\n        </div>\n        <a\n          className=\"waves-effect waves-light btn\"\n          id=\"new-quote\"\n          onClick={handleClick}\n        >\n          New quote\n        </a>\n      </div>\n    </div>\n  );\n};\n\nQuoteBox.propTypes = {};\n\nexport default QuoteBox;\n","/Users/kwalker/Desktop/quote-app/src/components/NewQuote.js",["26","27"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport QuoteBox from \"./QuoteBox\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst NewQuote = ({ quotes }) => {\n  //receive quotes from QuoteBox, map through and display in this component\n  return quotes.length ? (\n    <div className=\"text\">\n      <ul>\n        {quotes.map((quote) => {\n          return <li key={uuidv4()}>{quote.name}</li>;\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\"> No quotes, we have to find some : ) </div>\n  );\n};\n\nNewQuote.propTypes = {};\n\nexport default NewQuote;\n","/Users/kwalker/Desktop/quote-app/src/components/Share.js",["28"],{"ruleId":"29","severity":1,"message":"30","line":2,"column":8,"nodeType":"31","messageId":"32","endLine":2,"endColumn":17},{"ruleId":"33","severity":1,"message":"34","line":33,"column":9,"nodeType":"35","endLine":37,"endColumn":10},{"ruleId":"29","severity":1,"message":"30","line":2,"column":8,"nodeType":"31","messageId":"32","endLine":2,"endColumn":17},{"ruleId":"29","severity":1,"message":"36","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":16},{"ruleId":"29","severity":1,"message":"30","line":2,"column":8,"nodeType":"31","messageId":"32","endLine":2,"endColumn":17},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'QuoteBox' is defined but never used."]